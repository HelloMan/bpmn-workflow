<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009"  
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:mx="library://ns.adobe.com/flex/mx">
	<!-- host component -->
	<fx:Metadata>
		[HostComponent("org.workflow.view.components.bpmn.node.EventNode")]
	</fx:Metadata>
	
	<s:states>
		<s:State name="executed" />
		<s:State name="unexecuted" />
	</s:states>
	<fx:Script>
		<![CDATA[
			import org.workflow.model.bpmn2.TCancelEventDefinition;
			import org.workflow.model.bpmn2.TCompensateEventDefinition;
			import org.workflow.model.bpmn2.TConditionalEventDefinition;
			import org.workflow.model.bpmn2.TErrorEventDefinition;
			import org.workflow.model.bpmn2.TEscalationEventDefinition;
			import org.workflow.model.bpmn2.TEventDefinition;
			import org.workflow.model.bpmn2.TLinkEventDefinition;
			import org.workflow.model.bpmn2.TMessageEventDefinition;
			import org.workflow.model.bpmn2.TSignalEventDefinition;
			import org.workflow.model.bpmn2.TTerminateEventDefinition;
			import org.workflow.model.bpmn2.TTimerEventDefinition;
			
			[Bindable]
			[Embed(source="assets/icon/bpmn/obj16/TimerEventDefinition.gif")]
			public var timerEventDefinitionIcon:Class;
			
			[Bindable]
			[Embed(source="assets/icon/bpmn/obj16/CancelEventDefinition.gif")]
			public var cancelEventDefinition:Class;
			
			[Bindable]
			[Embed(source="assets/icon/bpmn/obj16/CompensateEventDefinition.gif")]
			public var compensateEventDefinition:Class;
			
			[Bindable]
			[Embed(source="assets/icon/bpmn/obj16/ConditionalEventDefinition.gif")]
			public var conditionalEventDefinition:Class;
			
			[Bindable]
			[Embed(source="assets/icon/bpmn/obj16/ErrorEventDefinition.gif")]
			public var errorEventDefinition:Class;
			
			[Bindable]
			[Embed(source="assets/icon/bpmn/obj16/EscalationEventDefinition.gif")]
			public var escalationEventDefinition:Class;
			
			
			[Bindable]
			[Embed(source="assets/icon/bpmn/obj16/SignalEventDefinition.gif")]
			public var signalEventDefinition:Class;
			
			[Bindable]
			[Embed(source="assets/icon/bpmn/obj16/LinkEventDefinition.gif")]
			public var linkEventDefinition:Class;
			
			
			[Bindable]
			[Embed(source="assets/icon/bpmn/obj16/TerminateEventDefinition.gif")]
			public var terminateEventDefinition:Class;
			
			[Bindable]
			[Embed(source="assets/icon/bpmn/obj16/MessageEventDefinition.gif")]
			public var messageEventDefinition:Class;
			
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				super.updateDisplayList(unscaledWidth,unscaledHeight);
				img.source = getEventDefinitionIcon();
			}
			
			private function getEventDefinitionIcon():Class
			{
				var eventDefinition:TEventDefinition = this.hostComponent.getEventDefinition();
				if (eventDefinition){
					//todo load image
					
					if (eventDefinition is TLinkEventDefinition){
						return linkEventDefinition;
					}
					
					if (eventDefinition is TMessageEventDefinition){
						return messageEventDefinition;
					}
					
					if (eventDefinition is TTerminateEventDefinition){
						return terminateEventDefinition;
					}
					
					if (eventDefinition is TErrorEventDefinition){
						return errorEventDefinition;
					}
					
					if (eventDefinition is TEscalationEventDefinition){
						return escalationEventDefinition;
					}
					
					if (eventDefinition is TSignalEventDefinition){
						return signalEventDefinition
					}
					
					if (eventDefinition is TTimerEventDefinition){
						return timerEventDefinitionIcon;
					}
					if (eventDefinition is TCancelEventDefinition){
						return cancelEventDefinition;
					}
					
					if (eventDefinition is TCompensateEventDefinition){
						return compensateEventDefinition;
					}
					
					if (eventDefinition is TConditionalEventDefinition){
						return conditionalEventDefinition;
					}
					
				}
				return null;
			}

		]]>
	</fx:Script>
	
	<!-- SkinParts
	name=marker, type=mx.core.IVisualElement, required=false
	name=img, type=mx.controls.Image, required=false
	name=labelDisplay, type=spark.components.Label, required=false
	-->
	<s:Ellipse top="0" left="0" right="0" bottom="0" >
		<s:stroke>
			<s:SolidColorStroke color="black" weight="2"    />
		</s:stroke>
		<s:fill>
			<s:LinearGradient >
				<s:GradientEntry color="white" alpha="0.5" color.executed="green"  color.unexecuted="white"/>
			</s:LinearGradient>
		</s:fill>
	</s:Ellipse>
	
	<s:Ellipse top="4" left="4" right="4" bottom="4" >
		<s:stroke>
			<s:SolidColorStroke color="black" weight="2"    />
		</s:stroke>
		<s:fill>
			<s:LinearGradient >
				<s:GradientEntry color="white" alpha="0.5" color.executed="green" color.unexecuted="white"/>
			</s:LinearGradient>
		</s:fill>
	</s:Ellipse>
	
	<s:Group id="marker" width="100%" height="100%">
		<s:Rect top="0" left="0" right="0" bottom="0">
			<s:stroke>
				<s:SolidColorStroke  color="red" weight="1"  />
			</s:stroke>
		</s:Rect>
	</s:Group>
	
	<mx:Image id="img" verticalCenter="0" horizontalCenter="0"/>
	<mx:Label id="labelDisplay" textAlign="center"  horizontalCenter="0"  bottom="-15" />
	
</s:Skin>
