<?xml version="1.0" encoding="utf-8"?>

<!--

    ADOBE SYSTEMS INCORPORATED
    Copyright 2008 Adobe Systems Incorporated
    All Rights Reserved.

    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for a Spark SkinnableContainer container.  

     @see spark.components.SkinnableContainer
        
      @langversion 3.0
      @playerversion Flash 10
      @playerversion AIR 1.5
      @productversion Flex 4
-->
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"  
    xmlns:fb="http://ns.adobe.com/flashbuilder/2009" xmlns:mx="library://ns.adobe.com/flex/mx" >
    <fx:Metadata>[HostComponent("org.workflow.view.components.GraphLink")]</fx:Metadata>
	
    <fx:Script >
        <![CDATA[         
			import org.workflow.view.components.GraphLink;
			import org.workflow.view.constants.GraphConstants;
			import org.workflow.view.utils.GraphUtils;
			import org.workflow.view.utils.MathUtils;
			
            /**
             *  @private
             */
			
			private static const unSelectedColor :Number = 000000;
			private static const selectedColor :Number = 0xeecf70;
			
            override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
            {
                super.updateDisplayList(unscaledWidth, unscaledHeight);
				
				this.graphics.clear();
				drawLine();
				if (this.hostComponent.selected){
					drawDraggableCircle();
				}
				updateTextPlacement();
				
            }
			
			private function drawDraggableCircle():void
			{
				var currPt :Point ;
				var nextPt :Point ;
				var centerPt:Point ;
				this.graphics.lineStyle(2,803330);
				this.graphics.beginFill(803330,0.5);
				for (var i:int = 0; i < hostComponent.points.length ;i++)
				{
					currPt = hostComponent.points.getItemAt(i) as Point;
					this.graphics.drawCircle(currPt.x,currPt.y,GraphConstants.MARKER_RADIOUS);
					if (i < hostComponent.points.length -1 ){
						nextPt = hostComponent.points.getItemAt(i+1) as Point;
						centerPt = new Point((currPt.x + nextPt.x) /2 ,(currPt.y + nextPt.y) /2);
						this.graphics.drawCircle(centerPt.x,centerPt.y,GraphConstants.MARKER_RADIOUS);
					}
				}
				this.graphics.endFill();
			}
			
			
			
			private function drawLine():void
			{
				if (hostComponent.points.length>=2)
				{
					if (hostComponent.selected){
						this.graphics.lineStyle(2,selectedColor);
					}else{
						this.graphics.lineStyle(2,unSelectedColor);
					}
					
					if (hostComponent.lineStyle == GraphLink.SOLID_LINE)
					{
						drawSolidLine();
					}else{
						drawDashedLine();
					}
					
					var beginPt:Point = hostComponent.points.getItemAt(hostComponent.points.length-2) as Point;
					var endPt:Point = hostComponent.points.getItemAt(hostComponent.points.length-1) as Point;
					var angle:Number = MathUtils.lineSlopeAngle(beginPt,endPt);
					drawArrowHead(endPt,angle,10);
				}
				
				
			}
			
			private function drawSolidLine():void{
				for (var i:int = 0; i <hostComponent.points.length ;i++)
				{
					var p :Point = hostComponent.points.getItemAt(i) as Point;
					if (i==0){
						this.graphics.moveTo(p.x,p.y);
					}else {
						this.graphics.lineTo(p.x,p.y);
					}
				}
			}
			
			private function drawDashedLine():void
			{
				for (var i:int = 0; i <hostComponent.points.length -1  ;i++)
				{
					var p1 :Point = hostComponent.points.getItemAt(i) as Point;
					var p2 :Point = hostComponent.points.getItemAt(i + 1) as Point;
					GraphUtils.drawDashedLine(this.graphics,p1,p2,2,10);
				}
				
			}
			
			private function drawArrowHead(pt:Point,angle:Number,Size:Number):void{	
				var pts:Array = [];
				pts[0] = pt;
				pts[1] = MathUtils.nextPointOfLine(angle + Math.PI / 9, pt, Size);
				pts[2] = MathUtils.nextPointOfLine(angle, pt, Size * 6/10);
				pts[3] = MathUtils.nextPointOfLine(angle - Math.PI / 9, pt, Size);
				
				with(graphics){			
					moveTo(pts[0].x, pts[0].y);			
					lineTo(pts[1].x, pts[1].y);
					lineTo(pts[2].x, pts[2].y);		
					lineTo(pts[3].x, pts[3].y);
					lineTo(pts[0].x, pts[0].y);	
				}	
			}
			
			private function updateTextPlacement():void
			{
				var centerPt:Point;
				if (this.hostComponent.points.length >=2){
					if ((this.hostComponent.points.length % 2 ) ==0){
						var p1:Point = this.hostComponent.points.getItemAt(this.hostComponent.points.length /2 -1) as Point;
						var p2:Point =  this.hostComponent.points.getItemAt(this.hostComponent.points.length /2) as Point;
						
						centerPt = new Point((p1.x + p2.x)/2,(p1.y + p2.y) /2);
					}else{
						centerPt =  this.hostComponent.points.getItemAt(this.hostComponent.points.length /2) as Point;
					}
					labelDisplay.x = centerPt.x - labelDisplay.width /2;
					labelDisplay.y = centerPt.y - labelDisplay.height /2;
				}
				
			}

        ]]>        
    </fx:Script>
	
	<mx:Label id="labelDisplay" textAlign="center"  />
</s:Skin>
